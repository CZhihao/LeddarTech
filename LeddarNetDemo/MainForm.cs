// *****************************************************************************
// Module..: SDK -- Software development kit for Leddar products.
//
/// \file    MainForm.cs
///
/// \brief   The main form for the LeddarNET example program.
///
// Platform: .NET
//
// Copyright (c) 2013 LeddarTech Inc. All rights reserved.
// Information contained herein is or may be confidential and proprietary to
// LeddarTech inc. Prior to using any part of the software development kit
// accompanying this notice, you must accept and agree to be bound to the
// terms of the LeddarTech Inc. license agreement accompanying this file.
// *****************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace LeddarNetDemo
{
    public partial class MainForm : Form
    {
        private LeddarNET.Device mDevice;

        // *********************************************************************
        // Function: MainForm
        //
        /// \brief   Constructor generated by form designer plus initialization
        ///          of the device object and of controls to their proper state.
        // **********************************************************************

        public MainForm()
        {
            InitializeComponent();

            mDevice = new LeddarNET.Device();
            mDevice.ParentControl = this;

            UpdateControls();
        }

        // *********************************************************************
        // Function: UpdateControls
        //
        /// \brief   Update the state of controls according to the current
        ///          state of the device object.
        // **********************************************************************

        private void
        UpdateControls()
        {
            if ( mDevice.Connected )
            {
                fPBNext.Enabled = false;
                fPBPrevious.Enabled = false;
                fPBLoad.Enabled = false;
                fTrackBar.Enabled = false;
                fPBConnect.Enabled = true;
                fPBConnect.Text = "Disconnect";
                fLVDetections.Enabled = true;
                fPBRecord.Enabled = true;
                fTBAddress.Enabled = false;
                fTBFilename.Enabled = false;
                fPBConfigure.Enabled = true;
                fPBList.Enabled = false;
                fPBBrowse.Enabled = false;
            }
            else if ( mDevice.RecordSize > 0 )
            {
                fPBNext.Enabled = true;
                fPBPrevious.Enabled = true;
                fPBLoad.Enabled = true;
                fPBLoad.Text = "Close";
                fTrackBar.Enabled = true;
                fPBConnect.Enabled = false;
                fLVDetections.Enabled = true;
                fPBRecord.Enabled = false;
                fTBAddress.Enabled = false;
                fTBFilename.Enabled = false;
                fPBConfigure.Enabled = true;
                fPBList.Enabled = false;
                fPBBrowse.Enabled = false;
            }
            else
            {
                fPBNext.Enabled = false;
                fPBPrevious.Enabled = false;
                fPBLoad.Enabled = true;
                fPBLoad.Text = "Load";
                fTrackBar.Enabled = false;
                fPBConnect.Enabled = true;
                fPBConnect.Text = "Connect";
                fLVDetections.Enabled = false;
                fPBRecord.Enabled = false;
                fTBAddress.Enabled = true;
                fTBFilename.Enabled = true;
                fPBConfigure.Enabled = false;
                fPBList.Enabled = true;
                fPBBrowse.Enabled = true;
            }

            if ( mDevice.Recording )
            {
                fPBRecord.Text = "Stop";
                fPBConfigureRecording.Enabled = false;
            }
            else
            {
                fPBRecord.Text = "Record";
                fPBConfigureRecording.Enabled = true;
            }
        }

        // *********************************************************************
        // Function: UpdateTrackBar
        //
        /// \brief   Synchonize the track bar value to the record index.
        // **********************************************************************

        private void
        UpdateTrackBar()
        {
            fTrackBar.Value = (int) mDevice.CurrentRecordIndex;
        }

        // *********************************************************************
        // Function: DeviceNewData
        //
        /// \brief   Event-handler called when a new set of data is available
        ///          from the device.
        /// 
        /// Fill the list view with the current detections.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        DeviceNewData( object sender, EventArgs e )
        {
            fLVDetections.Items.Clear();

            LeddarNET.Detection[] lDetections = mDevice.Detections();

            foreach( LeddarNET.Detection lDetection in lDetections )
            {
                ListViewItem lItem = new ListViewItem( lDetection.Segment.ToString() );

                lItem.SubItems.Add( lDetection.Distance.ToString( "F2" ) );
                lItem.SubItems.Add( lDetection.Amplitude.ToString( "F1" ) );
                lItem.SubItems.Add( lDetection.Flags.ToString() );
                fLVDetections.Items.Add( lItem );
            }
        }

        // *********************************************************************
        // Function: MainFormFormClosing
        //
        /// \brief   Event-handler called when the form is about to close.
        /// 
        /// We cleanup and release the device object.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        MainFormFormClosing( object sender, FormClosingEventArgs e )
        {
            mDevice.Disconnect();
            mDevice = null;
        }

        // *********************************************************************
        // Function: TrackBarValueChanged
        //
        /// \brief   Event-handler called when the value of the trackbar is
        ///          changed.
        /// 
        /// If the current value is different from the current index, move the
        /// record replay to the new index (note: this will trigger the
        /// DataReceived event so the list view will be updated).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        TrackBarValueChanged( object sender, EventArgs e )
        {
            if ( fTrackBar.Value != mDevice.CurrentRecordIndex )
            {
                mDevice.MoveRecordTo( (uint) fTrackBar.Value );
            }
        }

        // *********************************************************************
        // Function: PBListClick
        //
        /// \brief   Event-handler called when the List button is clicked.
        /// 
        /// Open the SensorListForm so that the user can see the available
        /// sensors and select one. If the user confirms, the address of the
        /// selected sensor is copied in the textbox.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBListClick( object sender, EventArgs e )
        {
            SensorListForm lForm = new SensorListForm();

            if ( lForm.ShowDialog( this ) == System.Windows.Forms.DialogResult.OK )
            {
                fTBAddress.Text = lForm.SelectedAddress;
            }
        }

        // *********************************************************************
        // Function: PBConnectClick
        //
        /// \brief   Event-handler called when the Connect button is clicked.
        /// 
        /// Try to connect to a sensor at the address specified in the textbox.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBConnectClick( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                try
                {
                    // It may take some time to disconnect to display "working"
                    // cursor.
                    Cursor = Cursors.WaitCursor;

                    mDevice.Disconnect();
                }
                finally
                {
                    Cursor = Cursors.Default;
                }
            }
            else
            {
                if ( mDevice.Connect( fTBAddress.Text ) )
                {
                    // Connection succeeded, automatically start continuous
                    // data tarnsfer.
                    mDevice.StartDataTransfer( LeddarNET.DataLevels.Detections );
                    mDevice.DataReceived += DeviceNewData;
                }
                else
                {
                    MessageBox.Show( "Connection Failed" );
                }
            }

            UpdateControls();
        }

        // *********************************************************************
        // Function: PBBrowseClick
        //
        /// \brief   Event-handler called when the Browse button is clicked.
        /// 
        /// Open a file dialog so that the user can select a file. If the user
        /// confirms, the file name is copied to the textbox.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBBrowseClick( object sender, EventArgs e )
        {
            OpenFileDialog lDialog = new OpenFileDialog();

            if ( lDialog.ShowDialog( this ) == System.Windows.Forms.DialogResult.OK )
            {
                fTBFilename.Text = lDialog.FileName;
            }
        }

        // *********************************************************************
        // Function: PBLoadClick
        //
        /// \brief   Event-handler called when the Next button is clicked.
        /// 
        /// Move the record replay to the next frame (note: this will
        /// trigger the DataReceived event so the list view will be updated).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBLoadClick( object sender, EventArgs e )
        {
            if ( mDevice.RecordSize > 0 )
            {
                mDevice.Disconnect();
            }
            else
            {
                // May get an exception if there is a problem loading the file.
                try
                {
                    Cursor = Cursors.WaitCursor;

                    mDevice.LoadRecord( fTBFilename.Text );

                    // Setup data transfer so the list view is updated when
                    // we move from frame to frame.
                    mDevice.StartDataTransfer( LeddarNET.DataLevels.Detections );
                    mDevice.DataReceived += DeviceNewData;

                    // Wait for record to finished loading so we get the real
                    // size for the trackbar.
                    while( mDevice.RecordLoading )
                    {
                        System.Threading.Thread.Sleep( 250 );
                    }

                    // Set the range of the trackbar from the size of the record.
                    fTrackBar.Maximum = (int)( mDevice.RecordSize - 1 );
                }
                catch( Exception Ex )
                {
                    MessageBox.Show( Ex.Message );
                }
                finally
                {
                    Cursor = Cursors.Default;
                }
            }

            UpdateControls();
        }

        // *********************************************************************
        // Function: PBPreviousClick
        //
        /// \brief   Event-handler called when the Previous button is clicked.
        /// 
        /// Move the record replay to the previous frame (note: this will
        /// trigger the DataReceived event so the list view will be updated).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBPreviousClick( object sender, EventArgs e )
        {
            mDevice.StepBackward();
            UpdateTrackBar();
        }

        // *********************************************************************
        // Function: PBNextClick
        //
        /// \brief   Event-handler called when the Next button is clicked.
        /// 
        /// Move the record replay to the next frame (note: this will
        /// trigger the DataReceived event so the list view will be updated).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBNextClick( object sender, EventArgs e )
        {
            mDevice.StepForward();
            UpdateTrackBar();
        }

        // *********************************************************************
        // Function: PBRecordClick
        //
        /// \brief   Event-handler called when the Record button is clicked.
        /// 
        /// Toggle recording (stop it if active, start it if inactive).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBRecordClick( object sender, EventArgs e )
        {
            if ( mDevice.Recording )
            {
                mDevice.StopRecording();
            }
            else
            {
                mDevice.StartRecording();
            }

            UpdateControls();
        }

        // *********************************************************************
        // Function: PBConfigureClick
        //
        /// \brief   Event-handler called when the Configure button is clicked.
        /// 
        /// Open the ConfigurationForm so the user can modify the sensor settings.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBConfigureClick( object sender, EventArgs e )
        {
            ConfigurationForm lForm = new ConfigurationForm();

            lForm.TheDevice = mDevice;
            lForm.ShowDialog( this );
        }

        // *********************************************************************
        // Function: PBConfigureRecordingClick
        //
        /// \brief   Event-handler called when the ConfigureRecording button is
        ///          clicked.
        /// 
        /// Open the RecordSettingsForm so the user can configure recording.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBConfigureRecordingClick( object sender, EventArgs e )
        {
            RecordSettingsForm lForm = new RecordSettingsForm();

            lForm.TheDevice = mDevice;
            lForm.ShowDialog( this );
        }
    }
}

// End of file MainForm.cs
