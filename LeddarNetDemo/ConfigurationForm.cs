// *****************************************************************************
// Module..: SDK -- Software development kit for Leddar products.
//
/// \file    ConfigurationForm.cs
///
/// \brief   Form part of the LeddarNET example program to modify the device
///          configuration.
///
// Platform: .NET
//
// Copyright (c) 2013-2014 LeddarTech Inc. All rights reserved.
// Information contained herein is or may be confidential and proprietary to
// LeddarTech inc. Prior to using any part of the software development kit
// accompanying this notice, you must accept and agree to be bound to the
// terms of the LeddarTech Inc. license agreement accompanying this file.
// *****************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace LeddarNetDemo
{
    public partial class ConfigurationForm : Form
    {
        private LeddarNET.Device mDevice;

        // *********************************************************************
        // Function: ConfigurationForm
        //
        /// \brief   Constructor generated by form designer.
        // **********************************************************************

        public ConfigurationForm()
        {
            InitializeComponent();
        }

        // *********************************************************************
        // Function: UpdateControls
        //
        /// \brief   Called by functions that may change the current state to
        ///          update the state of all controls.
        // **********************************************************************

        private void
        UpdateControls()
        {
            if ( mDevice.Connected )
            {
                fTBName.Enabled = true;
                fDUDOversampling.Enabled = true;
                fDUDAccumulations.Enabled = true;
                fNUDPointCount.Enabled = true;
                fNUDLedIntensity.Enabled = true;
                fNUDThreshold.Enabled = true;

                if ( mDevice.ConfigurationModified )
                {
                    fPBWrite.Enabled = true;
                    fPBRestore.Enabled = true;
                }
                else
                {
                    fPBWrite.Enabled = false;
                    fPBRestore.Enabled = false;
                }
            }
            else
            {
                fTBName.Enabled = false;
                fDUDOversampling.Enabled = false;
                fDUDAccumulations.Enabled = false;
                fNUDPointCount.Enabled = false;
                fNUDLedIntensity.Enabled = false;
                fNUDThreshold.Enabled = false;
                fPBWrite.Enabled = false;
                fPBRestore.Enabled = false;
            }
        }

        // *********************************************************************
        // Function: UpdateValues
        //
        /// \brief   Called when entering the form and when restoring to 
        ///          synchronized the values in the controls with those from
        ///          the device.
        // **********************************************************************

        private void
        UpdateValues()
        {
            fTBName.Text = mDevice.GetTextProperty( LeddarNET.Properties.DeviceName, 0 );

            fDUDOversampling.SelectedIndex =
                (int) mDevice.GetProperty( LeddarNET.Properties.OversamplingExponent, 0 );

            fDUDAccumulations.SelectedIndex =
                (int)mDevice.GetProperty( LeddarNET.Properties.AccumulationExponent, 0 );

            fNUDPointCount.Value =
                (Decimal) mDevice.GetProperty( LeddarNET.Properties.BasePointCount, 0 );

            fNUDLedIntensity.Value =
                (Decimal) mDevice.GetProperty( LeddarNET.Properties.LedIntensity, 0 );

            fNUDThreshold.Value =
                (Decimal) mDevice.GetProperty( LeddarNET.Properties.ThresholdOffset, 0 );
        }

        // *********************************************************************
        // Function: TBNameTextChanged
        //
        /// \brief   Event-handler called when the text in the device name
        ///          textbox is changed.
        /// 
        /// Simply write the value to the device if connected (properties
        /// cannot be changed when replaying a record).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        TBNameTextChanged( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                mDevice.SetProperty( LeddarNET.Properties.DeviceName, 0,
                                     fTBName.Text );
                UpdateControls();
            }
        }

        // *********************************************************************
        // Function: DUDOversamplingSelectedItemChanged
        //
        /// \brief   Event-handler called when the selected item of the
        ///          oversampling domain up down is changed.
        /// 
        /// Simply write the value to the device if connected (properties
        /// cannot be changed when replaying a record).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        DUDOversamplingSelectedItemChanged( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                mDevice.SetProperty( LeddarNET.Properties.OversamplingExponent, 0,
                                     fDUDOversampling.SelectedIndex );
                UpdateControls();
            }
        }

        // *********************************************************************
        // Function: DUDAccumulationsSelectedItemChanged
        //
        /// \brief   Event-handler called when the selected item of the
        ///          accumulations domain up down is changed.
        /// 
        /// Simply write the value to the device if connected (properties
        /// cannot be changed when replaying a record).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        DUDAccumulationsSelectedItemChanged( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                mDevice.SetProperty( LeddarNET.Properties.AccumulationExponent, 0,
                                     fDUDAccumulations.SelectedIndex );
                UpdateControls();
            }
        }

        // *********************************************************************
        // Function: NUDPointCountValueChanged
        //
        /// \brief   Event-handler called when the value in the point count
        ///          numeric up down is changed.
        /// 
        /// Simply write the value to the device if connected (properties
        /// cannot be changed when replaying a record).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        NUDPointCountValueChanged( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                mDevice.SetProperty( LeddarNET.Properties.BasePointCount, 0,
                                     (double) fNUDPointCount.Value );
            }
        }

        // *********************************************************************
        // Function: NUDLedIntensityValueChanged
        //
        /// \brief   Event-handler called when the value in the LED intensity
        ///          numeric up down is changed.
        /// 
        /// Simply write the value to the device if connected (properties
        /// cannot be changed when replaying a record).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        NUDLedIntensityValueChanged( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                mDevice.SetProperty( LeddarNET.Properties.LedIntensity, 0,
                                    (double) fNUDLedIntensity.Value );
                UpdateControls();
            }
        }

        // *********************************************************************
        // Function: NUDThresholdValueChanged
        //
        /// \brief   Event-handler called when the value in the threshold
        ///          numeric up down is changed.
        /// 
        /// Simply write the value to the device if connected (properties
        /// cannot be changed when replaying a record).
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        NUDThresholdValueChanged( object sender, EventArgs e )
        {
            if ( mDevice.Connected )
            {
                mDevice.SetProperty( LeddarNET.Properties.ThresholdOffset, 0,
                                     (double) fNUDThreshold.Value );
                UpdateControls();
            }
        }

        // *********************************************************************
        // Function: PBWriteClick
        //
        /// \brief   Event-handler called when the Write button is clicked.
        /// 
        /// The current configuration values are sent to the sensor.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBWriteClick( object sender, EventArgs e )
        {
            mDevice.WriteConfiguration();
            UpdateControls();
        }

        // *********************************************************************
        // Function: PBRestoreClick
        //
        /// \brief   Event-handler called when the Restore button is clicked.
        /// 
        /// The configuration values stored in the PC are restored to the
        /// values in the sensor.
        /// 
        /// \param   sender  Not used
        /// \param   e       Not used
        // **********************************************************************

        private void
        PBRestoreClick( object sender, EventArgs e )
        {
            mDevice.RestoreConfiguration();
            UpdateControls();
            UpdateValues();
        }

        // *********************************************************************
        // Function: TheDevice
        //
        /// \brief   Property to pass the device to work with.
        // **********************************************************************

        public LeddarNET.Device TheDevice
        {
            get
            {
                return mDevice;
            }
            set
            {
                mDevice = value;
                UpdateControls();
                UpdateValues();
            }
        }
    }
}

// End of file ConfigurationForm.cs
